{"ast":null,"code":"var _jsxFileName = \"/Users/dotronghieu/Documents/vmc/wallet-graph-2d/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useMemo } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { graphData, graphData as originalGraphData } from \"./data/graphData\";\nimport \"./app.css\";\nimport AddressList from \"./table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const graphRef = useRef();\n  const [visibleGroups, setVisibleGroups] = useState([1, 2]); // adjust group numbers as needed\n\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [filteredNodes, setFilteredNodes] = useState(graphData.nodes);\n  const links = Object.assign(originalGraphData.links);\n  useEffect(() => {\n    if (graphRef.current) {\n      // Set link distance to 200 pixels (customize as needed)\n      graphRef.current.d3Force(\"link\").distance(link => link.customLength || 50);\n    }\n  }, []);\n  useEffect(() => {\n    const res = originalGraphData.nodes.filter(node => visibleGroups.includes(node.group));\n    setFilteredNodes(res);\n  }, [visibleGroups]);\n  const filteredLinks = useMemo(() => {\n    return originalGraphData.links.filter(link => {\n      console.log('link: ', link.source, link.target);\n      return filteredNodes.filter(item => item.visible).map(node => node.id).includes(link.source) && filteredNodes.filter(item => item.visible).map(node => node.id).includes(link.target);\n    });\n  }, [filteredNodes]);\n  useEffect(() => {\n    console.log('filteredLinks: ', filteredLinks);\n  }, [filteredLinks]);\n  const filteredGraphData = useMemo(() => {\n    console.log('vn: ', filteredNodes);\n    const visiableNodes = filteredNodes.filter(node => {\n      return node.visible;\n    });\n    return {\n      nodes: visiableNodes,\n      links: filteredLinks\n    };\n  }, [filteredNodes, filteredLinks]);\n  const toggleGroup = group => {\n    setVisibleGroups(groups => groups.includes(group) ? groups.filter(g => g !== group) : [...groups, group]);\n  };\n  const handleClickNode = node => {\n    setSelectedNode(node.id);\n  };\n  useEffect(() => {\n    console.log(`Selected node: ${selectedNode}`);\n  }, [selectedNode]);\n  const onToggleVisible = id => {\n    console.log('id', id);\n    const updatedNodes = filteredNodes.map(node => {\n      if (node.id == id) {\n        return {\n          ...node,\n          visible: !node.visible\n        };\n      }\n      return node;\n    });\n    // Update the graph data with the new visibility state\n    setFilteredNodes(updatedNodes);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      alignContent: \"center\",\n      justifyItems: \"center\",\n      backgroundColor: \"#060713\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"10px\"\n      },\n      children: [[1, 2].map(group => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleGroup(group),\n        children: visibleGroups.includes(group) ? `Hide Group ${group}` : `Show Group ${group}`\n      }, group, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"add a node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddressList, {\n      nodes: filteredNodes,\n      selectedId: selectedNode,\n      onToggleVisible: onToggleVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ForceGraph2D\n    // width={1000}\n    // height={700}\n    , {\n      backgroundColor: \"#091024\",\n      ref: graphRef,\n      graphData: filteredGraphData,\n      nodeAutoColorBy: \"group\",\n      nodeLabel: \"name\",\n      linkDirectionalParticles: 2,\n      linkDirectionalParticleSpeed: d => d.value * 0.001,\n      linkWidth: d => d.value * 0.1,\n      linkColor: link => link.color || \"#ffffff\",\n      linkDirectionalArrowLength: 8 // Arrow length in pixels\n      ,\n      linkDirectionalArrowRelPos: 0.8 // Arrow position (0 = start, 1 = end, 0.5 = middle)\n      ,\n      onNodeClick: node => handleClickNode(node),\n      d3Force: \"charge\",\n      d3VelocityDecay: 0.5,\n      nodeCanvasObject: (node, ctx, globalScale) => {\n        const radius = 12;\n        // Skip rendering if coordinates aren't ready yet\n        if (!isFinite(node.x) || !isFinite(node.y)) return;\n\n        // Draw outer white ring\n        ctx.beginPath();\n        ctx.arc(node.x, node.y, radius, 0, 2 * Math.PI, false);\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fill();\n\n        // Draw gradient inner circle\n        const innerRadius = radius - 1;\n        const gradient = ctx.createRadialGradient(node.x, node.y, innerRadius / 4, node.x, node.y, innerRadius);\n        if (node.group === 1) {\n          gradient.addColorStop(0, \"#ffcc00\");\n          gradient.addColorStop(1, \"#000000\");\n        }\n        if (node.group === 2) {\n          gradient.addColorStop(0, \"#95D5E9\");\n          gradient.addColorStop(1, \"#000000\");\n        }\n        ctx.beginPath();\n        ctx.arc(node.x, node.y, innerRadius, 0, 2 * Math.PI, false);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Td9XQvB1qtkVGPrQ2n77Cj7wmaU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMemo","ForceGraph2D","graphData","originalGraphData","AddressList","jsxDEV","_jsxDEV","App","_s","graphRef","visibleGroups","setVisibleGroups","selectedNode","setSelectedNode","filteredNodes","setFilteredNodes","nodes","links","Object","assign","current","d3Force","distance","link","customLength","res","filter","node","includes","group","filteredLinks","console","log","source","target","item","visible","map","id","filteredGraphData","visiableNodes","toggleGroup","groups","g","handleClickNode","onToggleVisible","updatedNodes","style","width","height","alignContent","justifyItems","backgroundColor","position","children","margin","onClick","fileName","_jsxFileName","lineNumber","columnNumber","selectedId","ref","nodeAutoColorBy","nodeLabel","linkDirectionalParticles","linkDirectionalParticleSpeed","d","value","linkWidth","linkColor","color","linkDirectionalArrowLength","linkDirectionalArrowRelPos","onNodeClick","d3VelocityDecay","nodeCanvasObject","ctx","globalScale","radius","isFinite","x","y","beginPath","arc","Math","PI","fillStyle","fill","innerRadius","gradient","createRadialGradient","addColorStop","_c","$RefreshReg$"],"sources":["/Users/dotronghieu/Documents/vmc/wallet-graph-2d/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useMemo } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { graphData, graphData as originalGraphData } from \"./data/graphData\";\nimport \"./app.css\";\nimport AddressList from \"./table\";\n\nfunction App() {\n  const graphRef = useRef();\n  const [visibleGroups, setVisibleGroups] = useState([1, 2]); // adjust group numbers as needed\n\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const [filteredNodes, setFilteredNodes] = useState(graphData.nodes);\n\n  const links = Object.assign( originalGraphData.links)\n\n  useEffect(() => {\n    if (graphRef.current) {\n      // Set link distance to 200 pixels (customize as needed)\n      graphRef.current\n        .d3Force(\"link\")\n        .distance((link) => link.customLength || 50);\n    }\n  }, []);\n\n  useEffect(() => {\n    const res = originalGraphData.nodes.filter((node) =>\n      visibleGroups.includes(node.group)\n    );\n    setFilteredNodes(res);\n  }, [visibleGroups]);\n\n  const filteredLinks = useMemo(() => {\n    return originalGraphData.links.filter((link) => {\n      console.log('link: ', link.source, link.target);\n      return (\n        ((filteredNodes\n          .filter((item) => item.visible)\n          .map((node) => node.id)\n          .includes(link.source)) &&\n       ( filteredNodes\n          .filter((item) => item.visible)\n          .map((node) => node.id)\n          .includes(link.target)))\n      );\n    });\n  }, [filteredNodes]);\n\n  useEffect(() => {\n    console.log('filteredLinks: ', filteredLinks);\n    \n  }, [filteredLinks]);\n\n  const filteredGraphData = useMemo(() => {\n    console.log('vn: ', filteredNodes);\n\n    const visiableNodes = filteredNodes.filter((node) => {\n      return node.visible\n    })\n    \n    return { nodes: visiableNodes, links: filteredLinks };\n  }, [filteredNodes, filteredLinks]);\n\n  const toggleGroup = (group) => {\n    setVisibleGroups((groups) =>\n      groups.includes(group)\n        ? groups.filter((g) => g !== group)\n        : [...groups, group]\n    );\n  };\n\n  const handleClickNode = (node) => {\n    setSelectedNode(node.id);\n  }\n\n  useEffect(() => {\n    console.log(`Selected node: ${selectedNode}`);\n    \n  }, [selectedNode]);\n\n  const onToggleVisible = (id) => {\n    console.log('id', id);\n    \n    const updatedNodes = filteredNodes.map((node) => {\n      if (node.id == id) {\n        return { ...node, visible: !node.visible };\n      }\n      return node;\n    });\n    // Update the graph data with the new visibility state\n    setFilteredNodes(updatedNodes);\n  }\n\n  return (\n    <div\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n        alignContent: \"center\",\n        justifyItems: \"center\",\n        backgroundColor: \"#060713\",\n        position: \"relative\",\n      }}\n    >\n      <div style={{ margin: \"10px\" }}>\n        {[1, 2].map((group) => (\n          <button key={group} onClick={() => toggleGroup(group)}>\n            {visibleGroups.includes(group)\n              ? `Hide Group ${group}`\n              : `Show Group ${group}`}\n          </button>\n        ))}\n        <button>add a node</button>\n      </div>\n      <AddressList nodes={filteredNodes} selectedId={selectedNode} onToggleVisible={onToggleVisible}/>\n      <ForceGraph2D\n        // width={1000}\n        // height={700}\n        backgroundColor=\"#091024\"\n        ref={graphRef}\n        graphData={filteredGraphData}\n        nodeAutoColorBy=\"group\"\n        nodeLabel=\"name\"\n        linkDirectionalParticles={2}\n        linkDirectionalParticleSpeed={(d) => d.value * 0.001}\n        linkWidth={(d) => d.value * 0.1}\n        linkColor={(link) => link.color || \"#ffffff\"}\n        linkDirectionalArrowLength={8} // Arrow length in pixels\n        linkDirectionalArrowRelPos={0.8} // Arrow position (0 = start, 1 = end, 0.5 = middle)\n        onNodeClick={(node) => handleClickNode(node)}\n        d3Force=\"charge\"\n        d3VelocityDecay={0.5}\n        nodeCanvasObject={(node, ctx, globalScale) => {\n          const radius = 12;\n          // Skip rendering if coordinates aren't ready yet\n          if (!isFinite(node.x) || !isFinite(node.y)) return;\n\n          // Draw outer white ring\n          ctx.beginPath();\n          ctx.arc(node.x, node.y, radius, 0, 2 * Math.PI, false);\n          ctx.fillStyle = \"#ffffff\";\n          ctx.fill();\n\n          // Draw gradient inner circle\n          const innerRadius = radius - 1;\n          const gradient = ctx.createRadialGradient(\n            node.x,\n            node.y,\n            innerRadius / 4,\n            node.x,\n            node.y,\n            innerRadius\n          );\n          if (node.group === 1) {\n            gradient.addColorStop(0, \"#ffcc00\");\n            gradient.addColorStop(1, \"#000000\");\n          }\n          if (node.group === 2) {\n            gradient.addColorStop(0, \"#95D5E9\");\n            gradient.addColorStop(1, \"#000000\");\n          }\n\n          ctx.beginPath();\n          ctx.arc(node.x, node.y, innerRadius, 0, 2 * Math.PI, false);\n          ctx.fillStyle = gradient;\n\n          ctx.fill();\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}