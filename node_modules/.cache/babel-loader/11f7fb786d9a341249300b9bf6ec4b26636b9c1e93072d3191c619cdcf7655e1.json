{"ast":null,"code":"var _jsxFileName = \"/Users/dotronghieu/Documents/vmc/wallet-graph-2d/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useMemo } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { graphData as originalGraphData } from \"./data/graphData\";\nimport \"./app.css\";\nimport AddressList from \"./table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const graphRef = useRef();\n  const [visibleGroups, setVisibleGroups] = useState([1, 2]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [filteredNodes, setFilteredNodes] = useState(originalGraphData.nodes);\n\n  // Configure force graph link distance\n  useEffect(() => {\n    if (graphRef.current) {\n      graphRef.current.d3Force(\"link\").distance(link => link.customLength || 50);\n    }\n  }, []);\n\n  // Update filtered nodes when groups change\n  useEffect(() => {\n    setFilteredNodes(originalGraphData.nodes.filter(node => visibleGroups.includes(node.group)));\n  }, [visibleGroups]);\n\n  // Filter visible links\n  const filteredLinks = useMemo(() => {\n    const visibleNodeIds = filteredNodes.filter(n => n.visible).map(n => n.id);\n    return originalGraphData.links.filter(link => visibleNodeIds.includes(getNodeId(link.source)) && visibleNodeIds.includes(getNodeId(link.target)));\n  }, [filteredNodes]);\n\n  // Final graph data\n  const filteredGraphData = useMemo(() => {\n    return {\n      nodes: filteredNodes.filter(node => node.visible),\n      links: filteredLinks\n    };\n  }, [filteredNodes, filteredLinks]);\n\n  // Re-run simulation when data changes\n  useEffect(() => {\n    if (graphRef.current) graphRef.current.d3ReheatSimulation();\n  }, [filteredGraphData, visibleGroups]);\n\n  // Toggle group visibility\n  const toggleGroup = group => {\n    setVisibleGroups(groups => groups.includes(group) ? groups.filter(g => g !== group) : [...groups, group]);\n  };\n\n  // Node click handler\n  const handleClickNode = node => {\n    setSelectedNode(node.id);\n    console.log(`Selected node: ${node.id}`);\n  };\n\n  // Toggle individual node visibility\n  const onToggleVisible = id => {\n    setFilteredNodes(prevNodes => prevNodes.map(node => node.id === id ? {\n      ...node,\n      visible: !node.visible\n    } : node));\n  };\n\n  // Utility: Get node ID whether object or string\n  const getNodeId = node => typeof node === \"object\" ? node.id : node;\n\n  // Custom Node Renderer\n  const renderNode = (node, ctx) => {\n    const radius = 12;\n    if (!isFinite(node.x) || !isFinite(node.y)) return;\n\n    // Outer ring\n    ctx.beginPath();\n    ctx.arc(node.x, node.y, radius, 0, 2 * Math.PI, false);\n    ctx.fillStyle = \"#ffffff\";\n    ctx.fill();\n\n    // Inner gradient\n    const innerRadius = radius - 1;\n    const gradient = ctx.createRadialGradient(node.x, node.y, innerRadius / 4, node.x, node.y, innerRadius);\n    gradient.addColorStop(0, node.group === 1 ? \"#ffcc00\" : \"#95D5E9\");\n    gradient.addColorStop(1, \"#000000\");\n    ctx.beginPath();\n    ctx.arc(node.x, node.y, innerRadius, 0, 2 * Math.PI, false);\n    ctx.fillStyle = gradient;\n    ctx.fill();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [[1, 2].map(group => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleGroup(group),\n        children: visibleGroups.includes(group) ? `Hide Group ${group}` : `Show Group ${group}`\n      }, group, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add a node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddressList, {\n      nodes: filteredNodes,\n      selectedId: selectedNode,\n      onToggleVisible: onToggleVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      ref: graphRef,\n      graphData: filteredGraphData,\n      backgroundColor: \"#091024\",\n      nodeAutoColorBy: \"group\",\n      nodeLabel: \"name\",\n      linkDirectionalParticles: 2,\n      linkDirectionalParticleSpeed: d => d.value * 0.001,\n      linkWidth: d => d.value * 0.1,\n      linkColor: () => \"#ffffff\",\n      linkDirectionalArrowLength: 8,\n      linkDirectionalArrowRelPos: 0.8,\n      onNodeClick: handleClickNode,\n      d3Force: \"charge\",\n      d3VelocityDecay: 0.5,\n      nodeCanvasObject: renderNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"E8zhZUCZmNh307phzWbpjyQwyQw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMemo","ForceGraph2D","graphData","originalGraphData","AddressList","jsxDEV","_jsxDEV","App","_s","graphRef","visibleGroups","setVisibleGroups","selectedNode","setSelectedNode","filteredNodes","setFilteredNodes","nodes","current","d3Force","distance","link","customLength","filter","node","includes","group","filteredLinks","visibleNodeIds","n","visible","map","id","links","getNodeId","source","target","filteredGraphData","d3ReheatSimulation","toggleGroup","groups","g","handleClickNode","console","log","onToggleVisible","prevNodes","renderNode","ctx","radius","isFinite","x","y","beginPath","arc","Math","PI","fillStyle","fill","innerRadius","gradient","createRadialGradient","addColorStop","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","selectedId","ref","backgroundColor","nodeAutoColorBy","nodeLabel","linkDirectionalParticles","linkDirectionalParticleSpeed","d","value","linkWidth","linkColor","linkDirectionalArrowLength","linkDirectionalArrowRelPos","onNodeClick","d3VelocityDecay","nodeCanvasObject","_c","$RefreshReg$"],"sources":["/Users/dotronghieu/Documents/vmc/wallet-graph-2d/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useMemo } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { graphData as originalGraphData } from \"./data/graphData\";\nimport \"./app.css\";\nimport AddressList from \"./table\";\n\nfunction App() {\n  const graphRef = useRef();\n\n  const [visibleGroups, setVisibleGroups] = useState([1, 2]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [filteredNodes, setFilteredNodes] = useState(originalGraphData.nodes);\n\n  // Configure force graph link distance\n  useEffect(() => {\n    if (graphRef.current) {\n      graphRef.current.d3Force(\"link\").distance((link) => link.customLength || 50);\n    }\n  }, []);\n\n  // Update filtered nodes when groups change\n  useEffect(() => {\n    setFilteredNodes(\n      originalGraphData.nodes.filter((node) => visibleGroups.includes(node.group))\n    );\n  }, [visibleGroups]);\n\n  // Filter visible links\n  const filteredLinks = useMemo(() => {\n    const visibleNodeIds = filteredNodes.filter(n => n.visible).map(n => n.id);\n    return originalGraphData.links.filter(\n      (link) =>\n        visibleNodeIds.includes(getNodeId(link.source)) &&\n        visibleNodeIds.includes(getNodeId(link.target))\n    );\n  }, [filteredNodes]);\n\n  // Final graph data\n  const filteredGraphData = useMemo(() => {\n    return {\n      nodes: filteredNodes.filter((node) => node.visible),\n      links: filteredLinks\n    };\n  }, [filteredNodes, filteredLinks]);\n\n  // Re-run simulation when data changes\n  useEffect(() => {\n    if (graphRef.current) graphRef.current.d3ReheatSimulation();\n  }, [filteredGraphData, visibleGroups]);\n\n  // Toggle group visibility\n  const toggleGroup = (group) => {\n    setVisibleGroups((groups) =>\n      groups.includes(group) ? groups.filter((g) => g !== group) : [...groups, group]\n    );\n  };\n\n  // Node click handler\n  const handleClickNode = (node) => {\n    setSelectedNode(node.id);\n    console.log(`Selected node: ${node.id}`);\n  };\n\n  // Toggle individual node visibility\n  const onToggleVisible = (id) => {\n    setFilteredNodes((prevNodes) =>\n      prevNodes.map((node) =>\n        node.id === id ? { ...node, visible: !node.visible } : node\n      )\n    );\n  };\n\n  // Utility: Get node ID whether object or string\n  const getNodeId = (node) => (typeof node === \"object\" ? node.id : node);\n\n  // Custom Node Renderer\n  const renderNode = (node, ctx) => {\n    const radius = 12;\n    if (!isFinite(node.x) || !isFinite(node.y)) return;\n\n    // Outer ring\n    ctx.beginPath();\n    ctx.arc(node.x, node.y, radius, 0, 2 * Math.PI, false);\n    ctx.fillStyle = \"#ffffff\";\n    ctx.fill();\n\n    // Inner gradient\n    const innerRadius = radius - 1;\n    const gradient = ctx.createRadialGradient(\n      node.x, node.y, innerRadius / 4, node.x, node.y, innerRadius\n    );\n    gradient.addColorStop(0, node.group === 1 ? \"#ffcc00\" : \"#95D5E9\");\n    gradient.addColorStop(1, \"#000000\");\n\n    ctx.beginPath();\n    ctx.arc(node.x, node.y, innerRadius, 0, 2 * Math.PI, false);\n    ctx.fillStyle = gradient;\n    ctx.fill();\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"controls\">\n        {[1, 2].map((group) => (\n          <button key={group} onClick={() => toggleGroup(group)}>\n            {visibleGroups.includes(group) ? `Hide Group ${group}` : `Show Group ${group}`}\n          </button>\n        ))}\n        <button>Add a node</button>\n      </div>\n\n      <AddressList\n        nodes={filteredNodes}\n        selectedId={selectedNode}\n        onToggleVisible={onToggleVisible}\n      />\n\n      <ForceGraph2D\n        ref={graphRef}\n        graphData={filteredGraphData}\n        backgroundColor=\"#091024\"\n        nodeAutoColorBy=\"group\"\n        nodeLabel=\"name\"\n        linkDirectionalParticles={2}\n        linkDirectionalParticleSpeed={(d) => d.value * 0.001}\n        linkWidth={(d) => d.value * 0.1}\n        linkColor={() => \"#ffffff\"}\n        linkDirectionalArrowLength={8}\n        linkDirectionalArrowRelPos={0.8}\n        onNodeClick={handleClickNode}\n        d3Force=\"charge\"\n        d3VelocityDecay={0.5}\n        nodeCanvasObject={renderNode}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}